//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Appeals = newAppealsTable("public", "appeals", "")

type appealsTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	UserID       postgres.ColumnInteger
	AppealTypeID postgres.ColumnInteger
	Title        postgres.ColumnString
	Description  postgres.ColumnString
	Address      postgres.ColumnString
	Latitude     postgres.ColumnFloat
	Longitude    postgres.ColumnFloat
	StatusID     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AppealsTable struct {
	appealsTable

	EXCLUDED appealsTable
}

// AS creates new AppealsTable with assigned alias
func (a AppealsTable) AS(alias string) *AppealsTable {
	return newAppealsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AppealsTable with assigned schema name
func (a AppealsTable) FromSchema(schemaName string) *AppealsTable {
	return newAppealsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AppealsTable with assigned table prefix
func (a AppealsTable) WithPrefix(prefix string) *AppealsTable {
	return newAppealsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AppealsTable with assigned table suffix
func (a AppealsTable) WithSuffix(suffix string) *AppealsTable {
	return newAppealsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAppealsTable(schemaName, tableName, alias string) *AppealsTable {
	return &AppealsTable{
		appealsTable: newAppealsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newAppealsTableImpl("", "excluded", ""),
	}
}

func newAppealsTableImpl(schemaName, tableName, alias string) appealsTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		UserIDColumn       = postgres.IntegerColumn("user_id")
		AppealTypeIDColumn = postgres.IntegerColumn("appeal_type_id")
		TitleColumn        = postgres.StringColumn("title")
		DescriptionColumn  = postgres.StringColumn("description")
		AddressColumn      = postgres.StringColumn("address")
		LatitudeColumn     = postgres.FloatColumn("latitude")
		LongitudeColumn    = postgres.FloatColumn("longitude")
		StatusIDColumn     = postgres.IntegerColumn("status_id")
		allColumns         = postgres.ColumnList{IDColumn, UserIDColumn, AppealTypeIDColumn, TitleColumn, DescriptionColumn, AddressColumn, LatitudeColumn, LongitudeColumn, StatusIDColumn}
		mutableColumns     = postgres.ColumnList{UserIDColumn, AppealTypeIDColumn, TitleColumn, DescriptionColumn, AddressColumn, LatitudeColumn, LongitudeColumn, StatusIDColumn}
	)

	return appealsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		UserID:       UserIDColumn,
		AppealTypeID: AppealTypeIDColumn,
		Title:        TitleColumn,
		Description:  DescriptionColumn,
		Address:      AddressColumn,
		Latitude:     LatitudeColumn,
		Longitude:    LongitudeColumn,
		StatusID:     StatusIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
