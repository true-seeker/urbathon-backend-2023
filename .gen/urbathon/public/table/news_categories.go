//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var NewsCategories = newNewsCategoriesTable("public", "news_categories", "")

type newsCategoriesTable struct {
	postgres.Table

	// Columns
	ID    postgres.ColumnInteger
	Title postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NewsCategoriesTable struct {
	newsCategoriesTable

	EXCLUDED newsCategoriesTable
}

// AS creates new NewsCategoriesTable with assigned alias
func (a NewsCategoriesTable) AS(alias string) *NewsCategoriesTable {
	return newNewsCategoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NewsCategoriesTable with assigned schema name
func (a NewsCategoriesTable) FromSchema(schemaName string) *NewsCategoriesTable {
	return newNewsCategoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NewsCategoriesTable with assigned table prefix
func (a NewsCategoriesTable) WithPrefix(prefix string) *NewsCategoriesTable {
	return newNewsCategoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NewsCategoriesTable with assigned table suffix
func (a NewsCategoriesTable) WithSuffix(suffix string) *NewsCategoriesTable {
	return newNewsCategoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNewsCategoriesTable(schemaName, tableName, alias string) *NewsCategoriesTable {
	return &NewsCategoriesTable{
		newsCategoriesTable: newNewsCategoriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newNewsCategoriesTableImpl("", "excluded", ""),
	}
}

func newNewsCategoriesTableImpl(schemaName, tableName, alias string) newsCategoriesTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		TitleColumn    = postgres.StringColumn("title")
		allColumns     = postgres.ColumnList{IDColumn, TitleColumn}
		mutableColumns = postgres.ColumnList{TitleColumn}
	)

	return newsCategoriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:    IDColumn,
		Title: TitleColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
