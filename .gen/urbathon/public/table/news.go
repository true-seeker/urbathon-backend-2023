//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var News = newNewsTable("public", "news", "")

type newsTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	Title          postgres.ColumnString
	Body           postgres.ColumnString
	Date           postgres.ColumnTimestampz
	CategoryID     postgres.ColumnInteger
	PhotoURL       postgres.ColumnString
	UserID         postgres.ColumnInteger
	OrganizationID postgres.ColumnInteger
	PollID         postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NewsTable struct {
	newsTable

	EXCLUDED newsTable
}

// AS creates new NewsTable with assigned alias
func (a NewsTable) AS(alias string) *NewsTable {
	return newNewsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NewsTable with assigned schema name
func (a NewsTable) FromSchema(schemaName string) *NewsTable {
	return newNewsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NewsTable with assigned table prefix
func (a NewsTable) WithPrefix(prefix string) *NewsTable {
	return newNewsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NewsTable with assigned table suffix
func (a NewsTable) WithSuffix(suffix string) *NewsTable {
	return newNewsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNewsTable(schemaName, tableName, alias string) *NewsTable {
	return &NewsTable{
		newsTable: newNewsTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newNewsTableImpl("", "excluded", ""),
	}
}

func newNewsTableImpl(schemaName, tableName, alias string) newsTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		TitleColumn          = postgres.StringColumn("title")
		BodyColumn           = postgres.StringColumn("body")
		DateColumn           = postgres.TimestampzColumn("date")
		CategoryIDColumn     = postgres.IntegerColumn("category_id")
		PhotoURLColumn       = postgres.StringColumn("photo_url")
		UserIDColumn         = postgres.IntegerColumn("user_id")
		OrganizationIDColumn = postgres.IntegerColumn("organization_id")
		PollIDColumn         = postgres.IntegerColumn("poll_id")
		allColumns           = postgres.ColumnList{IDColumn, TitleColumn, BodyColumn, DateColumn, CategoryIDColumn, PhotoURLColumn, UserIDColumn, OrganizationIDColumn, PollIDColumn}
		mutableColumns       = postgres.ColumnList{TitleColumn, BodyColumn, DateColumn, CategoryIDColumn, PhotoURLColumn, UserIDColumn, OrganizationIDColumn, PollIDColumn}
	)

	return newsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		Title:          TitleColumn,
		Body:           BodyColumn,
		Date:           DateColumn,
		CategoryID:     CategoryIDColumn,
		PhotoURL:       PhotoURLColumn,
		UserID:         UserIDColumn,
		OrganizationID: OrganizationIDColumn,
		PollID:         PollIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
