//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AppealCommentPhotos = newAppealCommentPhotosTable("public", "appeal_comment_photos", "")

type appealCommentPhotosTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnInteger
	AppealCommentID postgres.ColumnInteger
	URL             postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AppealCommentPhotosTable struct {
	appealCommentPhotosTable

	EXCLUDED appealCommentPhotosTable
}

// AS creates new AppealCommentPhotosTable with assigned alias
func (a AppealCommentPhotosTable) AS(alias string) *AppealCommentPhotosTable {
	return newAppealCommentPhotosTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AppealCommentPhotosTable with assigned schema name
func (a AppealCommentPhotosTable) FromSchema(schemaName string) *AppealCommentPhotosTable {
	return newAppealCommentPhotosTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AppealCommentPhotosTable with assigned table prefix
func (a AppealCommentPhotosTable) WithPrefix(prefix string) *AppealCommentPhotosTable {
	return newAppealCommentPhotosTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AppealCommentPhotosTable with assigned table suffix
func (a AppealCommentPhotosTable) WithSuffix(suffix string) *AppealCommentPhotosTable {
	return newAppealCommentPhotosTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAppealCommentPhotosTable(schemaName, tableName, alias string) *AppealCommentPhotosTable {
	return &AppealCommentPhotosTable{
		appealCommentPhotosTable: newAppealCommentPhotosTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newAppealCommentPhotosTableImpl("", "excluded", ""),
	}
}

func newAppealCommentPhotosTableImpl(schemaName, tableName, alias string) appealCommentPhotosTable {
	var (
		IDColumn              = postgres.IntegerColumn("id")
		AppealCommentIDColumn = postgres.IntegerColumn("appeal_comment_id")
		URLColumn             = postgres.StringColumn("url")
		allColumns            = postgres.ColumnList{IDColumn, AppealCommentIDColumn, URLColumn}
		mutableColumns        = postgres.ColumnList{AppealCommentIDColumn, URLColumn}
	)

	return appealCommentPhotosTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		AppealCommentID: AppealCommentIDColumn,
		URL:             URLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
