//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AppealTypes = newAppealTypesTable("public", "appeal_types", "")

type appealTypesTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnInteger
	Title            postgres.ColumnString
	AppealCategoryID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AppealTypesTable struct {
	appealTypesTable

	EXCLUDED appealTypesTable
}

// AS creates new AppealTypesTable with assigned alias
func (a AppealTypesTable) AS(alias string) *AppealTypesTable {
	return newAppealTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AppealTypesTable with assigned schema name
func (a AppealTypesTable) FromSchema(schemaName string) *AppealTypesTable {
	return newAppealTypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AppealTypesTable with assigned table prefix
func (a AppealTypesTable) WithPrefix(prefix string) *AppealTypesTable {
	return newAppealTypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AppealTypesTable with assigned table suffix
func (a AppealTypesTable) WithSuffix(suffix string) *AppealTypesTable {
	return newAppealTypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAppealTypesTable(schemaName, tableName, alias string) *AppealTypesTable {
	return &AppealTypesTable{
		appealTypesTable: newAppealTypesTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newAppealTypesTableImpl("", "excluded", ""),
	}
}

func newAppealTypesTableImpl(schemaName, tableName, alias string) appealTypesTable {
	var (
		IDColumn               = postgres.IntegerColumn("id")
		TitleColumn            = postgres.StringColumn("title")
		AppealCategoryIDColumn = postgres.IntegerColumn("appeal_category_id")
		allColumns             = postgres.ColumnList{IDColumn, TitleColumn, AppealCategoryIDColumn}
		mutableColumns         = postgres.ColumnList{TitleColumn, AppealCategoryIDColumn}
	)

	return appealTypesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		Title:            TitleColumn,
		AppealCategoryID: AppealCategoryIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
