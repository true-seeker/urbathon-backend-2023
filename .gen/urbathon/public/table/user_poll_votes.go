//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserPollVotes = newUserPollVotesTable("public", "user_poll_votes", "")

type userPollVotesTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnInteger
	UserID           postgres.ColumnInteger
	SelectedOptionID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserPollVotesTable struct {
	userPollVotesTable

	EXCLUDED userPollVotesTable
}

// AS creates new UserPollVotesTable with assigned alias
func (a UserPollVotesTable) AS(alias string) *UserPollVotesTable {
	return newUserPollVotesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserPollVotesTable with assigned schema name
func (a UserPollVotesTable) FromSchema(schemaName string) *UserPollVotesTable {
	return newUserPollVotesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserPollVotesTable with assigned table prefix
func (a UserPollVotesTable) WithPrefix(prefix string) *UserPollVotesTable {
	return newUserPollVotesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserPollVotesTable with assigned table suffix
func (a UserPollVotesTable) WithSuffix(suffix string) *UserPollVotesTable {
	return newUserPollVotesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserPollVotesTable(schemaName, tableName, alias string) *UserPollVotesTable {
	return &UserPollVotesTable{
		userPollVotesTable: newUserPollVotesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newUserPollVotesTableImpl("", "excluded", ""),
	}
}

func newUserPollVotesTableImpl(schemaName, tableName, alias string) userPollVotesTable {
	var (
		IDColumn               = postgres.IntegerColumn("id")
		UserIDColumn           = postgres.IntegerColumn("user_id")
		SelectedOptionIDColumn = postgres.IntegerColumn("selected_option_id")
		allColumns             = postgres.ColumnList{IDColumn, UserIDColumn, SelectedOptionIDColumn}
		mutableColumns         = postgres.ColumnList{UserIDColumn, SelectedOptionIDColumn}
	)

	return userPollVotesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		UserID:           UserIDColumn,
		SelectedOptionID: SelectedOptionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
