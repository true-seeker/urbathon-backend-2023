definitions:
  errorHandler.HttpErr:
    properties:
      message:
        example: Error message
        type: string
      status_code:
        example: 400
        type: integer
    type: object
  input.AppealUpdate:
    properties:
      address:
        example: Улица Пушкина
        type: string
      appeal_type_id:
        example: 1
        type: integer
      description:
        example: Текст обращения
        type: string
      latitude:
        example: 54.1234
        type: number
      longitude:
        example: 122.7656
        type: number
      title:
        example: Обращение
        type: string
    type: object
  input.UserLogin:
    properties:
      email:
        example: test@gmail.com
        type: string
      password:
        example: "123456"
        type: string
    type: object
  input.UserRegister:
    properties:
      email:
        example: test@gmail.com
        type: string
      name:
        example: Иванов Иван Иванович
        type: string
      password:
        example: "123456"
        type: string
    type: object
  response.Appeal:
    properties:
      address:
        example: Улица Пушкина
        type: string
      appeal_photos:
        items:
          $ref: '#/definitions/response.AppealPhoto'
        type: array
      appeal_status:
        $ref: '#/definitions/response.AppealStatus'
      appeal_type:
        $ref: '#/definitions/response.AppealType'
      description:
        example: Текст обращения
        type: string
      id:
        example: 1
        type: integer
      latitude:
        example: 54.1234
        type: number
      longitude:
        example: 122.7656
        type: number
      title:
        example: Обращение
        type: string
      user:
        $ref: '#/definitions/response.User'
    type: object
  response.AppealCategory:
    properties:
      id:
        example: 1
        type: integer
      title:
        example: Категория
        type: string
    type: object
  response.AppealPaged:
    properties:
      items:
        items:
          $ref: '#/definitions/response.Appeal'
        type: array
      next_page_url:
        example: /api/news?page=1&page_size=10
        type: string
      page:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      total:
        example: 100
        type: integer
    type: object
  response.AppealPhoto:
    properties:
      id:
        example: 1
        type: integer
      url:
        example: https://storage.yandexcloud.net/urbathon/test.jpg
        type: string
    type: object
  response.AppealStatus:
    properties:
      id:
        example: 1
        type: integer
      status:
        example: Решено
        type: string
    type: object
  response.AppealType:
    properties:
      appeal_category:
        $ref: '#/definitions/response.AppealCategory'
      id:
        example: 1
        type: integer
      title:
        example: Тип
        type: string
    type: object
  response.AppealTypeByCategory:
    properties:
      id:
        example: 1
        type: integer
      title:
        example: Тип
        type: string
    type: object
  response.News:
    properties:
      body:
        example: Тело новости
        type: string
      date:
        example: "2024-02-10T00:00:00+05:00"
        type: string
      id:
        example: 1
        type: integer
      title:
        example: Заголовок
        type: string
    type: object
  response.NewsPaged:
    properties:
      items:
        items:
          $ref: '#/definitions/response.News'
        type: array
      next_page_url:
        example: /api/news?page=1&page_size=10
        type: string
      page:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      total:
        example: 100
        type: integer
    type: object
  response.User:
    properties:
      email:
        example: test@gmail.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Иванов Иван Иванович
        type: string
    type: object
info:
  contact: {}
  description: Спецификация приложения команды подCRUDули
  title: Urbathon-2023
paths:
  /appeal:
    get:
      description: get all appeals
      parameters:
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: page
        in: query
        maximum: 20
        minimum: 1
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AppealPaged'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: get all appeals
      tags:
      - appeal
    post:
      consumes:
      - multipart/form-data
      description: create appeal
      parameters:
      - example: Улица Пушкина
        in: formData
        name: address
        type: string
      - example: 1
        in: formData
        name: appeal_type_id
        type: integer
      - example: Текст обращения
        in: formData
        name: description
        type: string
      - example: 54.1234
        in: formData
        name: latitude
        type: number
      - example: 122.7656
        in: formData
        name: longitude
        type: number
      - example: Обращение
        in: formData
        name: title
        type: string
      - collectionFormat: csv
        description: photos
        in: formData
        items:
          type: file
        name: photos
        required: true
        type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Appeal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: create appeal
      tags:
      - appeal
  /appeal/{id}:
    delete:
      description: delete appeal
      parameters:
      - default: 1
        description: appeal id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: delete appeal
      tags:
      - appeal
    get:
      description: get appeal by id
      parameters:
      - description: appeal id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Appeal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: get appeal by id
      tags:
      - appeal
    put:
      description: update appeal
      parameters:
      - description: appeal
        in: body
        name: appeal
        required: true
        schema:
          $ref: '#/definitions/input.AppealUpdate'
      - default: 1
        description: appeal id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Appeal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: update appeal
      tags:
      - appeal
  /appeal/{id}/status/{status_id}:
    post:
      description: update appeal status
      parameters:
      - default: 1
        description: appeal id
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: new status id
        in: path
        name: status_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: update appeal status
      tags:
      - appeal
  /appeal_category:
    get:
      description: get all appealCategories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.AppealCategory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: get all appealCategories
      tags:
      - appealCategory
  /appeal_category/{id}:
    get:
      description: get appealCategory by id
      parameters:
      - description: appealCategory id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AppealCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: get appealCategory by id
      tags:
      - appealCategory
  /appeal_category/{id}/appeal_types:
    get:
      description: get all appealTypes by CategoryId
      parameters:
      - description: appealCategory id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.AppealTypeByCategory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: get all appealTypes by CategoryId
      tags:
      - appealCategory
  /appeal_status:
    get:
      description: get all appealStatuses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.AppealStatus'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: get all appealStatuses
      tags:
      - appealStatus
  /appeal_status/{id}:
    get:
      description: get appealStatus by id
      parameters:
      - default: 1
        description: appealStatus id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AppealStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: get appealStatus by id
      tags:
      - appealStatus
  /appeal_type:
    get:
      description: get all appealTypes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.AppealType'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: get all appealTypes
      tags:
      - appealType
  /appeal_type/{id}:
    get:
      description: get appealType by id
      parameters:
      - description: appealType id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AppealType'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: get appealType by id
      tags:
      - appealType
  /auth/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: login and password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/input.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: login
      tags:
      - auth
  /auth/logout:
    post:
      description: logout
      responses:
        "200":
          description: OK
      summary: logout
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: register
      parameters:
      - description: UserRegister
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/input.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: register
      tags:
      - auth
  /auth/test:
    post:
      consumes:
      - application/json
      description: auth test
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.User'
      summary: auth test
      tags:
      - auth
  /news:
    get:
      description: get all news
      parameters:
      - default: 1
        description: page
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: page
        in: query
        maximum: 20
        minimum: 1
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NewsPaged'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: get all news
      tags:
      - news
  /news/{id}:
    get:
      description: get news by id
      parameters:
      - description: news id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.News'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorHandler.HttpErr'
      summary: get news by id
      tags:
      - news
swagger: "2.0"
